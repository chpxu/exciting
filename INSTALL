==================
Compiling exciting
==================

Requirements
------------------
exciting requires `xsltproc` to preprocess its XML schema into code. PLEASE ensure you have
this installed before proceeding.

exciting comes with all the external libraries required to compile the code in serial.
These include:

    FoX XML library for parsing the input
	http://www.uszla.me.uk/FoX/DoX/Licensing.html
	
	BLAS & LAPACK for linear algebra operations 
	http://www.netlib.org/lapack/LICENSE
	
	ARPACK for solving large scale eigenvalue problems
	http://www.caam.rice.edu/software/ARPACK/RiceBSD.txt#LICENSE
	
	LIBXC library of DFT exchange and correlation functionals 
	http://www.tddft.org/programs/octopus/wiki/index.php/Libxc

    BSPLINE-FORTRAN: Multidimensional B-Spline Interpolation of Data on a Regular Grid
    https://github.com/jacobwilliams/bspline-fortran

Compilation in parallel requires an MPI library, such as open-mpi, MPICH or Intel MPI library
and optionally, a version of Scalapack. These can be installed with a package manager such as 
APT, Conda, Spack or EasyBuild, or built manually from source. Some limited spack recipes for 
installing external libraries, compiled with GCC and Intel, are provided in build/utilities/spack. 

Test suite dependencies are specified in test/README. 


Compiling
------------------

In order to compile the code, one is required to copy a make.inc file from the examples:

  cp build/platforms/make.inc.ifort build/make.inc
   
which copies the make.inc for Intel. Examples are provided for the Intel and GCC compilers.
The code can then be built by typing:

  make 

in the exciting root directory. By default, the mpiandsmp and smp versions of exciting
are built, where mpiandsmp refers to a binary with both MPI and openMP parallelism enabled.
Serial and pure MPI builds are also possible by typing:

  make serial

and

  make mpi

respectively. Debug builds are available for the serial and mpiandsmp builds, by typing:

  make debug

or

  make debugmpiandsmp

respectively. The test suite can be run by typing:

  make test

For a full list of build options, one may consult the Makefile in the root directory. 
Auxiliary programs include "spacegroup" for producing crystal geometries
from spacegroup data, "species" for generating species files, and "eos" for
fitting equations of state to energy-volume data.

Please note that in order to use: 

  make clean

a make.inc file must be present in the build directory. 

CMake Support
------------------

Whilst CMake is present in exciting, this is in the developmental phase and CANNOT
be used to compile the code.


OS Support 
------------------

Mac OS

exciting can be compiled on mac OS, but it is complicated by nonstandard installation
locations for libraries, which can vary between OS versions and package managers.

Because production calculations typically require HPC resources, compilation on mac is
primarily intended for developers, and as such, we only provide schematic instructions
for modifying the make.inc. Details are provided in build/platforms/os_mac 

exciting has been tested on OS Catalina using GCC 9 and 10, openBLAS 0.3.12_0 and openmpi 4.1.0_1. 


Documentation
------------------

exciting's input documentation and the majority of its source documentation can be built with:

  make doc 

PDF documents are built in their respective doc/ subfolders. All documentation is parsed
through LaTex and requires the user to have a Tex distribution installed. 

exciting's source code documentation is in the process of migrating to FORD. At present, only
select excited-state modules are documented. These are specified in docs/ford_settings.md under
the `src_dir` tag. 

FORD is available as a python package and can be installed with pip. To install FORD, type:

  pip3 install ford

To build exciting's documentation using FORD, type:

  make ford

FORD generates html-based documentation, including graphical dependency analysis, which can be 
viewed by opening docs/exciting_ford/index.html in a web browser. More details of FORD can be found 
on its Github page: https://github.com/Fortran-FOSS-Programmers/ford and additional details regarding
installation of dependencies can be found under 'Known Issues', below. 


Compiling with exciting with SIRIUS
-----------------------------------

[SIRIUS](https://github.com/electronic-structure/SIRIUS) is a domain specific library for electronic structure calculations.
It implements pseudopotential plane wave (PP-PW) and full potential linearized augmented plane wave (FP-LAPW) methods,
and is designed for GPU acceleration of popular community codes such as Exciting, Elk and Quantum ESPRESSO.

Compiling exciting with SIRIUS is non-trivial, and as of this release, only one build chain is documented (CPU-only with
GCC9, MKL2017 and MPICH 3.3.2). This is provided in `build/utilities/docker/Dockerfile_ci_sirius`, with the main commands
reiterated here. The majority of SIRIUS's hard dependencies can be completely installed with the python package manager
spack. Assuming one has the build prerequisites (see apt-get in the Dockerfile), SIRIUS can be installed as follows:

```
git clone -c feature.manyFiles=true https://github.com/spack/spack.git
spack compiler find
spack external find
export SPEC="sirius@develop %gcc@9.4.0 build_type=Release +scalapack +fortran +tests ^intel-mkl@2017: threads=openmp ^mpich@3.3.2 ^spfft+single_precision target=x86_64"
# The location SIRIUS is installed to
export SIRIUS_ROOT=spack-sirius-install
export SIRIUS_ENV=spack-sirius-env
spack env create --with-view $SIRIUS_ROOT -d $SIRIUS_ENV
# Install SIRIUS's dependencies
# Note, this can take 1 - 2 hours depending on whether GCC and MPICH have already been installed on your system
# and then discovered by spack. Be sure to run the find and external commands AFTER installation of these packages.
spack -e $SIRIUS_ENV install --only=dependencies $SPEC
# Install SIRIUS
spack -e $SIRIUS_ENV install $SPEC
```

exciting can then be built, linking to SIRIUS, as follows (we note that SIRIUS_ROOT should probably be edited in the
make.inc to be consistent with the user's own installation path):

```
cd <EXCITINGROOT>
cp build/platforms/make.inc.sirius_ci build/make.inc
spack build-env ${SPEC} -- make mpiandsmp -j 4
```

and tested by:

```
cd test/
# Ensure the bottom of `test/defaults_config.yml` is set to:
# group_execution:
#   NONE: False
#   SLOW_TESTS: False
#   GW: False
#   LIBXC: False
#   SIRIUS: True
python3 runtest.py -e exciting_mpismp -t sirius
```

We note that as of exciting Fluorine, SIRIUS is only routinely tested on Ubuntu Focal.


Compiler Support
------------------

exciting requires an F2008-compliant compiler. exciting is known to compile with:

  Intel ifort: 2015, 2016, 2017, 2019, 2021
  GCC gfortran: 7, 8, 9, 10
  

Known Issues
------------------

Intel 2018
Compilation is known to fail at src_lib/mod_manopt.f90 with the error:

   catastrophic error: **Internal compiler error: segmentation violation signal raised** 

This is likely caused by a bug in the 2018 version of the ifort compiler.

GCC 10 and Above
If compiling with GCC 10, one should append the F90_OPTS, F77_OPTS and F90_DEBUGOPTS variables in
make.inc with `-fallow-argument-mismatch`. See:

  https://gcc.gnu.org/gcc-10/porting_to.html

for more details.

FORD Fails to Find Graphviz
On Debian Buster, we have noticed that FORD fails to find graphviz, despite pip installing
it as part of FORD's dependencies. This can be fixed by installing graphviz with APT. Optionally
one can also install python-dev and LXML, which facilitate faster generation of the search database:

  sudo apt install python3-all-dev graphviz
  pip3 install lxml

