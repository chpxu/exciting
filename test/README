exciting Test Suite 1.0 12/12/2020

This is the frame work for the exciting test suite. It depends on a number of python scripts that automate running and evaluating system tests for the all-electron full-potential package exciting.

The test suite compares output files from a exciting calculation to results from a reference calculation with certain tolerances.

Contact: 
sol group at Humbold Universitaet zu Berlin https://sol.physik.hu-berlin.de/index.php?page=contact

License: 
see README of exciting

Requirements:
The test suite requires python3 and the following packages:
 * argparse
 * collections
 * numpy
 * xml
 * unittest

Using the test suite:

    $python3 runtest.py (-a <action> -t <tests> -e <execuatble> -np <NP> -omp <OMP>)
        -h   --help          optional    show a help message and exit

        -a   --action        optional    Defines what action is done. That can be:
                                         'run'   - running tests 
                                         'ref'   - running references
                                                   References are always running with excitingser.
                                                   WARNING: This should only be done for NEW test cases or 
                                                   if all tests SUCCEEDED for the current version of the code.
                                         'clean' - cleaning test directories
                                         'report'- collecting results
                                         default is 'run'

        -t   --tests         optional    Test cases for the action. This can be either:
                                         <test case 1>, <test case 2>, ... - special test cases. This are the names of 
                                                                             the test case directories without '/'
                                         'all'                             - all test cases
                                         default is 'all'
 
        -e   --execuatble    optional    exciting execuatbles. Can be either 
                                         'excitingser' - serial version of the code 
                                         'excitingmpi' - version with open MP and MPI parallelisation
                                         Default is excitingser

        -np  --NP            optional    Number of cores for MPI parallelisation. Can only be used in combination with excitingmpi as executable.

        -omp --ompthreads   optional    Number of threads for open MP parallelisation. Check envarOMP in runtest.py to make sure that the script sets the right 
                                        environment variable.
            				Default is 2

Adding new test cases:

Use the script newtestcase.py to add a new test case.

    For easy use:

    $python3 newtestcase.py

    This will start a dialogue that asks about the name, a description and optionally a path to the reference calculation.

    $python3 newtestcase.py -n <name> -d <description> -r <path to reference calc> -i <init template>
        -h, --help        show a help message and exit
	
  	    -n --name         Name of the new test case.

	    -d --description  Description of the new test case.

	    -r --reference    Path to an existing caclculation, that will be the reference.

	    -i --init_file    Init file for the new test case. The available init files can be found at '/xml/init_templates'. Default is init_groundstate.xml.
	
For naming a new test case directories, following convention is used: groundstate-xctype-postprocessing/MBPT-material. postprocessing/MBPT stands for everything that comes on top of the ground state calculation, e.g. bandstructure, BSE or GW. Each section is divided by a "-" and if more words are used to describe a section, they are divided by a "_" (e.g. GGA_PBE for xctype). In general the name should give a brief overview on what is calculated. A more detailed description on the calculation and the test can be given in the description element in the init.xml (see below). 

If a path to the reference calculation is given with the -r option, the script runs automatically the reference calculation. If this is not given, the reference calculation has to be set up manually int test_farm/name/ref. Then the reference can be run at place or with runtest.py. Reference calculations are always running with excitingser.

An init.xml file defines the test. If only standard testing is done, a default one (init_groundstate.py) can be used. Other init files can be selected with the -i option. A list of all possible pre-built init files can be found at the end of this README. 

If the test needs special files and/or tolerances, it has to be added to the init.xml by hand. A brief description follows:
The root element is called <init> and has two attributes: 
    name                should be the same as directory name of the test case and is set automatically, if the script is used.
    description         includes a description of the calculation and the test. If nothing special is done, 
                        use the default explanation.
For each exciting output file that is tested, there is a <test> element which has a number of attributes and elements. The most important attributes are:
    file                string              name of the exciting output file that is tested (e.g. atoms.xml)
    tolFloat            float/double        tolerance for float (double) values
    tolMSE              float/double        tolerance for mean squred errors (e.g. energy bands). 
    condition           two ints            allows for defining a number of values that are allowed to fail. 
                                            First number for float failure, second for MSE failures.
    ignore              string              allows for defining values that will be ignored by the test (makes sense for machine dependent values like timings).
                                            the name of the values are the same as in the tested file. The names are seperated by a semicolon ";".
The default init.xml files can be found in test/xml/init_templates. In the following they are listed, with the files they test:
    groundstate         info.xml, atoms.xml, INFO.OUT, eigval.xml, evalcore.xml, geometry.xml

init files:
     The output files included in init_groundstate.xml are included in all the other init files too.

     init_groundstate.xml   -INFO.OUT, info.xml, atoms.xml, eigval.xml, evalcore.xml, geometry.xml
     init_dos.xml 	    -dos.xml
     init_bandstructure.xml -bandstructure.xml
     init_properties.xml    -RHO3D.xml, VCL3D.xml, VXC3D.xml, WF3D.xml, ELF3D.xml, EF3D.xml, LSJ.xml, EFG.xml, mossbauer.xml, expiqr.xml, effmass.xml, bandstructure.xml, dos.xml, KERR.OUT, EPSILON_11.OUT, EPSILON_12.OUT, EPSILON_33.OUT, CHI_111.OUT, ELNES.OUT
     init_GW.xml	    -EFERMI_GW.OUT, EVALQP.DAT, VXCNN.DAT, EPS00_GW.OUT
     init_BSE.xml	    -EPSILON/EPSILON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC11.OUT, EPSILON/EPSILON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC22.OUT, EPSILON/EPSILON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC33.OUT, EXCITON/EXCITON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC11.OUT, EXCITON/EXCITON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC22.OUT, EPSILON/EPSILON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC33.OUT, EXCITON/EXCITON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC11.OUT, EXCITON/EXCITON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC22.OUT, EXCITON/EXCITON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC33.OUT
     init_wannier.xml	    -TDOS_WANNIER.OUT, WANNIER_INFO.OUT, POLARIZATION.OUT
     init_spintexture.xml   -spintext.xml