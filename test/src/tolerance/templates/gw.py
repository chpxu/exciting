"""
Module containing default tolerances for GW output

Each entry has a unique key and value = {'tolerance':value, 'unit':Unit.unit}
where Unit is an enum class.  If a quantity does not have an associated unit,
unit = null.

Keys were generated by using the tolerance.py script. See that for command line
details.

Tolerances in default_tolerances cover files:
  * GW_INFO.OUT
  * EFERMI_GW.OUT
  * EVALQP.DAT
  * VXCNN.DAT
  * EPS00_GW.OUT
"""
from excitingtools.units import Unit

from ..tol_classes import DefaultTolerances, Tol, TolWithMessage


# No frequency unit is specified in GW_INFO.OUT or EPS00_GW.OUT, therefore 'frequency' will
# be given a NULL unit.
default = DefaultTolerances(integer=Tol(0),
                            float=Tol(1.e-8),
                            str=Tol(''),
                            energy=Tol(1.e-8, Unit.hartree),
                            frequency=Tol(1.e-8, Unit.null),
                            )


bandstructure_msg = 'Applies to KS and GW band structures'

# Tolerances for GW_INFO.OUT
gw_info_tols = {
    # correlation_self_energy_parameters
    'Solution of the QP equation': default.integer,
    'Energy alignment': default.integer,
    'Analytic continuation method': default.str,
    'Scheme to treat singularities': default.str,

    # mixed_product_basis_parameters
    'MT Angular momentum cutoff': default.integer,
    'MT Linear dependence tolerance factor': default.float,
    'Plane wave cutoff (in units of Gkmax)': TolWithMessage(default.float, unit=Unit.GK_max,
                                                            message='For the mixed product basis'),

    # bare_coulomb_potential_parameters
    'Plane wave cutoff (in units of Gkmax*gmb)': TolWithMessage(default.float,
                                                                message="For the bare Coulomb potential. Unit in key"),
    'Error tolerance for structure constants': TolWithMessage(1.e-10, message='Value can be extremely small ~ 1e-16'),
    'MB tolerance factor': default.float,

    'screened_coulomb_potential': default.str,
    'core_electrons_treatment': default.str,
    'qp_interval': default.integer,
    'n_empty': default.integer,
    'q_grid': default.integer,

    # mixed_product_wf_info
    'Maximal number of MT wavefunctions per atom': default.integer,
    'Total number of MT wavefunctions': default.integer,
    'Maximal number of PW wavefunctions': default.integer,
    'Total number of mixed-product wavefunctions': default.integer,

    # frequency_grid
    'Type: < fgrid >': default.str,
    'Frequency axis: < fconv >': default.str,
    'Number of frequencies: < nomeg >': default.integer,
    'Cutoff frequency: < freqmax >': default.frequency,
    'frequencies_weights': default.float,

    # ks_eigenstates_summary
    'Maximum number of LAPW states': default.integer,
    'Minimal number of LAPW states': default.integer,
    'Number of states used in GW - total KS': default.integer,
    'Number of states used in GW - occupied': default.integer,
    'Number of states used in GW - unoccupied': default.integer,
    'Number of states used in GW - dielectric function': default.integer,
    'Number of states used in GW - self energy': default.integer,
    'Energy of the highest unoccupied state': default.energy,
    'Energy of the highest unoccupied state': default.energy,
    'Number of valence electrons': TolWithMessage(default.integer, message='In the ground state calculation'),
    'Number of valence electrons treated in GW': default.integer,

    # ks_band_structure_summary and g0w0_band_structure_summary: Same keys
    'Fermi energy':  TolWithMessage(default.energy, message=bandstructure_msg),
    'Energy range': TolWithMessage(default.energy, message=bandstructure_msg),
    'Band index of VBM': TolWithMessage(default.integer, message=bandstructure_msg),
    'Band index of CBm': TolWithMessage(default.integer, message=bandstructure_msg),
    'Indirect BandGap (eV)': TolWithMessage(default.energy, unit=Unit.ev, message=bandstructure_msg),
    'Direct Bandgap at k(VBM) (eV)': TolWithMessage(default.energy, unit=Unit.ev, message=bandstructure_msg),
    'Direct Bandgap at k(CBm) (eV)': TolWithMessage(default.energy, unit=Unit.ev, message=bandstructure_msg),
    'k_point': TolWithMessage(default.float, message='Applies to the VBM and CBm of KS and GW band structures'),
    'ik': TolWithMessage(default.integer, message='Applies to the VBM and CBm of KS and GW band structures'),

    'n_q_cycles': default.integer
    }

# Tolerances for EFERMI_GW.OUT
e_fermi_gw_tols = {"EFERMI_GW": default.energy}

# Tolerances for EVALQP.DAT
evalqp_tols = {'energies': default.energy,
               'k_point': default.float,
               'weight': default.float}

# Tolerances for VXCNN.DAT
# It is expected that 'vkl' correspond to (kx,ky,kz) in fractional coordinates, hence unit = NULL
v_xc_nn_tols = {'v_xc_nn': default.energy,
                'vkl': default.float}

# Tolerances for EPS00_GW.OUT
eps_00_gw_tols = {'frequency': default.frequency,
                  're': TolWithMessage(default.float, message='eps00'),
                  'img': TolWithMessage(default.float, message='eps00')
                  }

# Single dictionary for all tested GW outputs, for dumping to JSON
gw_tolerances = {'files_under_test': ['GW_INFO.OUT', 'EFERMI_GW.OUT', 'EVALQP.DAT', 'VXCNN.DAT', 'EPS00_GW.OUT'],
                 'GW_INFO.OUT': gw_info_tols,
                 'EFERMI_GW.OUT': e_fermi_gw_tols,
                 'EVALQP.DAT': evalqp_tols,
                 'VXCNN.DAT': v_xc_nn_tols,
                 'EPS00_GW.OUT': eps_00_gw_tols
                 }
