"""
Module containing default tolerances for bandstructure and dos outputs

All unique {keys:tolerances} for bandstructure and dos outputs.
Each entry has a unique key and value = {'tolerance':value, 'unit':Unit.unit}
where Unit is an enum class.  If a quantity does not have an associated unit,
unit = null.

Keys were generated by using the tolerance.py script. See that for command line
details.

Tolerances in default_tolerances cover files:

Band structure:
  * bandstructure.xml
  * band_edges.out
  * effmass.xml

DOS:
  * dos.xml
  * ldos.out

"""
from excitingtools import Unit

from ..tol_classes import DefaultTolerances, Tol, TolWithMessage

# Default band structure and dos tolerances, used below
default = DefaultTolerances(integer=Tol(0),
                            float=Tol(1.e-8),
                            energy=Tol(1.e-6, Unit.hartree),
                            length=Tol(1.e-8, Unit.bohr),
                            inv_length=Tol(1e-8, Unit.inv_bohr),
                            dos=Tol(1.e-8, Unit.inv_hartree),
                            effective_mass=Tol(1.e-8, Unit.electron_rest_mass))

# bandstructure.xml
bandstructure = {'eval': default.energy,
                 'distance': default.inv_length
                 }

# dos.xml
dos = {'e': default.energy,
       'dos': default.dos}

# effmass.xml
# Assume lattice is the k-point in fractional coordinates, and cartesian is 1/Bohr
# however setting as floats.
effmass = {'eigenvalue': default.energy,
           'cartesian': default.float,
           'lattice': default.float,
           'evdk_matrix': default.float,
           'emt_matrix': default.effective_mass,
           'trace': TolWithMessage(default.float, message='Trace applies to dE/dk and m*'),
           'n': TolWithMessage(default.integer, message="key 'state number' ")
           }

# ldos.out
ldos = {'energy': default.energy,
        'ldos': default.dos
        }

# band_edges.out
band_edges = {'c_axis': default.inv_length,
              'VBM': default.energy,
              'CBm': default.energy}

# Two dictionaries: band structure related and dos related, for dumping to JSON
bandstructure_tolerances = {'bandstructure.xml': bandstructure,
                            'effmass.xml': effmass,
                            'band_edges.out': band_edges
                            }

dos_tolerances = {'dos.xml': dos,
                  'ldos.out': ldos,
                  }
