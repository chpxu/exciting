"""
Module containing default tolerances for property outputs

All unique {keys:tolerances} for plotting outputs.
Each entry has a unique key and value = {'tolerance':value, 'unit':Unit.unit}
where Unit is an enum class.  If a quantity does not have an associated unit,
unit = null.

Keys were generated by using the tolerance.py script.
See that for command line details.

Tolerances in default_tolerances cover files:

Optical Properties
  * EPSILON_11.OUT
  * EPSILON_12.OUT
  * EPSILON_33.OUT
  * POLARIZATION.OUT
  * expiqr.xml
  * KERR.OUT
  * CHI_111.OUT

Core Properties
  * coreoverlap.xml
  * ELNES.OUT
  * mossbauer.xml

Electric Field Properties
  * EFG.xml

Spin Properties
  * spintext.xml
  * LSJ.xml

Note, several properties are not covered by the test suite.
For a full list, see http://exciting.wikidot.com/ref:properties

TODO(Alex/Bee/Hannah) Issue 86. Establish units for property outputs
 * Refers to most files here. See issue on Gitlab for specifics
 * Requires adding to file header
 * Documenting in the input
 * Adding to corresponding tolerance files
"""
from excitingtools.units import Unit

from ..tol_classes import DefaultTolerances, Tol, TolWithMessage


default = DefaultTolerances(
                            integer=Tol(0),
                            float=Tol(1.e-8),
                            str=Tol(''),
                            length=Tol(1.e-8, Unit.bohr),
                            energy=Tol(1.e-8, Unit.hartree),
                            angle=Tol(1.e-6, Unit.degrees),
                            inv_length=Tol(1.e-8, Unit.inv_bohr)
                            )

# Optical Properties
epsilon_ij_out = {'energy': default.energy,
                  're': default.float,
                  'im': default.float}

polarization_out = {'electronic': default.float,
                    'ionic': default.float,
                    'total': default.float}

expiqr_xml = {'vecql': TolWithMessage(default.float, message="q-vector (lattice coordinates)"),
              'vecqc': TolWithMessage(default.inv_length, message="q-vector (Cartesian coordinates)"),
              'j': default.integer,
              'i': default.integer,
              'Im': default.float,
              'Re': default.float,
              'norm': default.float,
              'vkc': TolWithMessage(default.float, message="k-point (lattice coordinates)"),
              'vkl': TolWithMessage(default.inv_length, message="k-point (Cartesian coordinates)")}

kerr_out = {'energy': default.energy,
            're': default.angle,
            'im': default.angle}

chi_111_out = {'energy': default.energy,
               're': default.float,
               'im': default.float,
               'modulus': default.float}

optical_properties_tolerances = {'files_under_test': ['EPSILON_11.OUT',
                                                      'EPSILON_12.OUT',
                                                      'EPSILON_33.OUT',
                                                      'POLARIZATION.OUT',
                                                      'expiqr.xml',
                                                      'KERR.OUT',
                                                      'CHI_111.OUT'],
                                 'EPSILON_11.OUT': epsilon_ij_out,
                                 'EPSILON_12.OUT': epsilon_ij_out,
                                 'EPSILON_33.OUT': epsilon_ij_out,
                                 'POLARIZATION.OUT': polarization_out,
                                 'expiqr.xml': expiqr_xml,
                                 'KERR.OUT': kerr_out,
                                 'CHI_111.OUT': chi_111_out}

# Core Properties
coreoverlap_xml = {'nkpt': default.integer,
                   'index': default.integer,
                   'ist1': default.integer,
                   'ist2': default.integer,
                   'de': default.energy,
                   'overlap': default.float,
                   'ncg': default.integer,
                   'nstfv': default.integer}

elnes_out = {'energy': TolWithMessage(default.energy, message="Ha assumed for unit"),
             'elnes': default.float}

mossbauer_xml = {'numOfMeshPtsToNucRad': default.integer,
                 'n': default.integer,
                 'approxNucRad': default.length,
                 'contactChargeDensity': default.float,
                 'chemicalSymbol': default.str}

core_properties_tolerances = {'files_under_test': ['coreoverlap.xml',
                                                   'ELNES.OUT',
                                                   'mossbauer.xml'],
                              'coreoverlap.xml': coreoverlap_xml,
                              'ELNES.OUT': elnes_out,
                              'mossbauer.xml': mossbauer_xml}

# Electric Field Properties
efg_xml = {'efg': default.float,
           'eigenvalues': default.float,
           'trace': TolWithMessage(1.e-12,
                                   message='EFG-tensor trace can have a value < machine precision'
                                           'I.e. ~ 0'),
           'chemicalSymbol': default.str}

electric_field_properties_tolerances = {'files_under_test': ['EFG.xml'],
                                        'EFG.xml': efg_xml}

# Spin Properties
spin_texture_xml = {'ist': default.integer,
                    'k-point': default.float,
                    'spin': default.float,
                    'energy': default.energy}

lsj_xml = {'J': default.float,
           'S': default.float,
           'n': default.integer,
           'chemicalSymbol': default.str,
           'L': default.float}

spin_properties_tolerances = {'files_under_test': ['spintext.xml',
                                                   'LSJ.xml'],
                              'spintext.xml': spin_texture_xml,
                              'LSJ.xml': lsj_xml}