"""Module for class of exciting ground state.
"""
from xml.etree import ElementTree as ET

from excitingtools.input.base_class import ExcitingInput


class ExcitingGroundStateInput(ExcitingInput):

    # Reference: http://exciting.wikidot.com/ref:groundstate
    # Ideally this should be parsed from the schema BUT one would need to pull it from the web, unless a constants file
    # is autogenerated each time a version is upoloaded, the CI is run, or some other hook is triggered.
    # Or, the schema is packaged with excitingtools.
    _valid_attributes = {'CoreRelativity', 'ExplicitKineticEnergy', 'PrelimLinSteps', 'ValenceRelativity', 'autokpt',
                         'beta0', 'betadec', 'betainc', 'cfdamp', 'chgexs', 'deband', 'dipolecorrection',
                         'dipoleposition', 'dlinengyfermi', 'do', 'energyref', 'epsband', 'epschg', 'epsengy',
                         'epsforcescf', 'epsocc', 'epspot', 'fermilinengy', 'findlinentype', 'fracinr', 'frozencore',
                         'gmaxvr', 'isgkmax', 'ldapu', 'lmaxapw', 'lmaxinr', 'lmaxmat', 'lmaxvr', 'lorecommendation',
                         'lradstep', 'maxscl', 'mixer', 'mixerswitch', 'modifiedsv', 'msecStoredSteps', 'nempty',
                         'ngridk', 'niterconvcheck', 'nktot', 'nosource', 'nosym', 'nprad', 'npsden', 'nwrite',
                         'outputlevel', 'ptnucl', 'radialgridtype', 'radkpt', 'reducek', 'rgkmax', 'scfconv', 'stype',
                         'swidth', 'symmorph', 'tevecsv', 'tfibs', 'tforce', 'tpartcharges', 'useDensityMatrix',
                         'vdWcorrection', 'vkloff', 'xctype'}

    def __init__(self, **kwargs):
        """Puts all kwargs into the class attributes
        """
        # Check validity of kwargs
        keys = kwargs.keys()
        bad_kwargs = [key for key in keys if key not in self._valid_attributes]
        if bad_kwargs:
            raise ValueError(f'Input/s are not valid: {bad_kwargs}')

        self.__dict__.update(kwargs)

    def to_xml(self) -> ET.Element:
        """Put class attributes into an XML tree with the 'groundstate' element.

        Example ground state XML sub-tree:
           <groundstate vkloff="0.5  0.5  0.5" ngridk="2 2 2" mixer="msec" </groundstate>

        Note, kwargs preserve the order of the arguments, however the order does not appear to be
        preserved when passed to (or perhaps converted to string) with xml.etree.ElementTree.tostring.

        :return ET.Element ground_state: Ground state element tree, with class attributes inserted.
        """
        # Convert class attributes to input-formatted data, which can be serialised
        attributes_to_input = {int: lambda x: str(x),
                               float: lambda x: str(x),
                               bool: lambda x: str(x).lower(),
                               str: lambda x: x,
                               list: lambda mylist: " ".join(str(x) for x in mylist).strip(),
                               tuple: lambda mylist: " ".join(str(x) for x in mylist).strip()
                               }
        inputs = {}
        for key, value in self.__dict__.items():
            inputs[key] = attributes_to_input[type(value)](value)

        ground_state = ET.Element("groundstate", **inputs)
        # Seems to want this operation on a separate line
        ground_state.text = ' '

        return ground_state
